#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Left shift the 28-bit half
uint32_t leftShift(uint32_t half, int shiftCount) {
    return (half << shiftCount) | (half >> (28 - shiftCount));
}

// Permutation choice 1 table (PC-1) for initial key transformation
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1
};

// Permutation choice 2 table (PC-2) for creating the subkeys
int PC2[] = {
    14, 17, 11, 24, 1, 5, 3, 28, 
    15, 6, 21, 10, 23, 19, 12, 4, 
    26, 8, 16, 7, 27, 20, 13, 2, 
    41, 52, 31, 37, 47, 55, 30, 40, 
    51, 45, 33, 48, 44, 49, 39, 56, 
    34, 53, 46, 42, 50, 36, 29, 32
};

// Function to perform the initial key permutation (PC-1)
void applyPC1(uint64_t key, uint32_t *C, uint32_t *D) {
    *C = 0;
    *D = 0;
    for (int i = 0; i < 28; i++) {
        int bit = (key >> (64 - PC1[i])) & 1;
        *C |= (bit << (27 - i));  // Place the bit in C
        *D |= (bit << (27 - i));  // Place the bit in D
    }
}

// Function to apply PC-2 and create 48-bit subkey
uint64_t applyPC2(uint32_t C, uint32_t D) {
    uint64_t subkey = 0;
    for (int i = 0; i < 48; i++) {
        int bit = (i < 24) ? ((C >> (23 - i)) & 1) : ((D >> (47 - i)) & 1);
        subkey |= (bit << (47 - i));
    }
    return subkey;
}

// Function to generate the round keys
void generateRoundKeys(uint64_t key, uint64_t roundKeys[16]) {
    uint32_t C, D;
    
    // Step 1: Apply PC-1 to get C0 and D0
    applyPC1(key, &C, &D);
    
    // Step 2: Generate 16 round keys
    for (int i = 0; i < 16; i++) {
        // Step 2.1: Perform left shifts
        C = leftShift(C, (i == 0 || i == 1 || i == 8 || i == 15) ? 1 : 2);
        D = leftShift(D, (i == 0 || i == 1 || i == 8 || i == 15) ? 1 : 2);
        
        // Step 2.2: Apply PC-2 to generate the 48-bit subkey
        roundKeys[i] = applyPC2(C, D);
    }
}

int main() {
    uint64_t key = 0x133457799BBCDFF1;  // Example 56-bit key (hexadecimal)
    uint64_t roundKeys[16];
    
    // Generate the round keys
    generateRoundKeys(key, roundKeys);
    
    // Output the round keys
    for (int i = 0; i < 16; i++) {
        printf("Round Key %d: %016llx\n", i + 1, roundKeys[i]);
    }

    return 0;
}
